---
- name: check required variables
  fail: msg="{{ item }} is not defined"
  when: item not in vars
  with_items: "{{ samba_dc_replica_required_vars }}"

- name: generate samba controller config files
  include_tasks: dc_conf.yml

- name: generate smb.conf
  include_tasks: smb.conf.yml

- name: prepare bind service
  include_tasks: bind.yml
  when: samba_dns_backend != "SAMBA_INTERNAL"

- name: install samba replica packages
  apt_rpm:
    pkg: "{{ samba_dc_replica_packages }}"
    state: present
  when: samba_dc_replica_packages | length > 0
  notify: restart samba

- name: remove conflict samba server packages
  apt_rpm:
    pkg:
      - nss-ldapd
      - nscd
    state: absent
  notify: restart samba

- name: wait for master DC to start up
  include_tasks: wait4master.yml

- name: check if already provisioned
  stat:
    path: "/var/lib/samba/.ansible_replica"
  register: samba_replica

- name: get kerberos keky
  shell: echo {{samba_admin_pass}} | kinit administrator@{{samba_realm|upper}}
  changed_when: false

- name: register node as a replica
  block:
    - name: stop BIND9 daemon
      service:
        name: bind
        state: stopped
      register: cmd_result
      failed_when: cmd_result is failed and ('find' not in cmd_result.msg and 'found' not in cmd_result.msg)

    - name: stop Samba DC
      service:
        name: samba
        state: stopped

    - name: start provisioning replica
      include_tasks: replica_provision.yml
  rescue:
    - name: replica provision failed; remove intermidiate results
      file:
        path: "/var/lib/samba"
        state: absent
    - fail: msg="replica provision failed"
  when: not samba_replica.stat.exists | bool or not samba_deploy_soft | bool

- name: Create provision state file
  copy:
    content: ""
    dest: /var/lib/samba/.ansible_replica
    force: no

- name: samba upgrade dns
  shell: samba_upgradedns --dns-backend={{samba_dns_backend}}
  when: samba_dns_backend != "SAMBA_INTERNAL"
  notify: restart bind

- name: disable bind service
  service:
    name: bind
    enabled: false
    state: stopped
  when: samba_dns_backend == "SAMBA_INTERNAL"
  register: cmd_result
  failed_when: cmd_result is failed and ('find' not in cmd_result.msg and 'found' not in cmd_result.msg)

- name: enable samba service
  service:
    name: samba
    enabled: true

- name: start bind service
  service:
    name: bind
    state: started
  when: samba_dns_backend != "SAMBA_INTERNAL"
  register: cmd_result
  failed_when: cmd_result is failed and ('find' not in cmd_result.msg and 'found' not in cmd_result.msg)

- name: start samba service
  service:
    name: samba
    state: started

- name: register node in localhost hostvars
  set_fact:
    samba_replicas: "{{ hostvars['localhost']['samba_replicas'] | default([]) }} + [ '{{ inventory_hostname_short }}' ]"
  delegate_to: localhost
  delegate_facts: true
